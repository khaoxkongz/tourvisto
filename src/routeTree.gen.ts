/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ThxRouteImport } from './routes/thx'
import { Route as LoginRouteImport } from './routes/login'
import { Route as CheckoutRouteImport } from './routes/checkout'
import { Route as WebRouteRouteImport } from './routes/_web.route'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard.route'
import { Route as WebIndexRouteImport } from './routes/_web.index'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard.dashboard'
import { Route as DashboardTripsRouteRouteImport } from './routes/_dashboard.trips.route'
import { Route as DashboardUsersIndexRouteImport } from './routes/_dashboard.users.index'
import { Route as DashboardTripsIndexRouteImport } from './routes/_dashboard.trips.index'
import { Route as WebToursIdRouteImport } from './routes/_web.tours.$id'
import { Route as DashboardTripsNewRouteImport } from './routes/_dashboard.trips.new'
import { Route as DashboardTripsIdIndexRouteImport } from './routes/_dashboard.trips.$id.index'

const ThxRoute = ThxRouteImport.update({
  id: '/thx',
  path: '/thx',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutRoute = CheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRouteImport,
} as any)
const WebRouteRoute = WebRouteRouteImport.update({
  id: '/_web',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const WebIndexRoute = WebIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WebRouteRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardTripsRouteRoute = DashboardTripsRouteRouteImport.update({
  id: '/trips',
  path: '/trips',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardTripsIndexRoute = DashboardTripsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardTripsRouteRoute,
} as any)
const WebToursIdRoute = WebToursIdRouteImport.update({
  id: '/tours/$id',
  path: '/tours/$id',
  getParentRoute: () => WebRouteRoute,
} as any)
const DashboardTripsNewRoute = DashboardTripsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => DashboardTripsRouteRoute,
} as any)
const DashboardTripsIdIndexRoute = DashboardTripsIdIndexRouteImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => DashboardTripsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/checkout': typeof CheckoutRoute
  '/login': typeof LoginRoute
  '/thx': typeof ThxRoute
  '/trips': typeof DashboardTripsRouteRouteWithChildren
  '/dashboard': typeof DashboardDashboardRoute
  '/': typeof WebIndexRoute
  '/trips/new': typeof DashboardTripsNewRoute
  '/tours/$id': typeof WebToursIdRoute
  '/trips/': typeof DashboardTripsIndexRoute
  '/users': typeof DashboardUsersIndexRoute
  '/trips/$id': typeof DashboardTripsIdIndexRoute
}
export interface FileRoutesByTo {
  '/checkout': typeof CheckoutRoute
  '/login': typeof LoginRoute
  '/thx': typeof ThxRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/': typeof WebIndexRoute
  '/trips/new': typeof DashboardTripsNewRoute
  '/tours/$id': typeof WebToursIdRoute
  '/trips': typeof DashboardTripsIndexRoute
  '/users': typeof DashboardUsersIndexRoute
  '/trips/$id': typeof DashboardTripsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_web': typeof WebRouteRouteWithChildren
  '/checkout': typeof CheckoutRoute
  '/login': typeof LoginRoute
  '/thx': typeof ThxRoute
  '/_dashboard/trips': typeof DashboardTripsRouteRouteWithChildren
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_web/': typeof WebIndexRoute
  '/_dashboard/trips/new': typeof DashboardTripsNewRoute
  '/_web/tours/$id': typeof WebToursIdRoute
  '/_dashboard/trips/': typeof DashboardTripsIndexRoute
  '/_dashboard/users/': typeof DashboardUsersIndexRoute
  '/_dashboard/trips/$id/': typeof DashboardTripsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/checkout'
    | '/login'
    | '/thx'
    | '/trips'
    | '/dashboard'
    | '/'
    | '/trips/new'
    | '/tours/$id'
    | '/trips/'
    | '/users'
    | '/trips/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/checkout'
    | '/login'
    | '/thx'
    | '/dashboard'
    | '/'
    | '/trips/new'
    | '/tours/$id'
    | '/trips'
    | '/users'
    | '/trips/$id'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_web'
    | '/checkout'
    | '/login'
    | '/thx'
    | '/_dashboard/trips'
    | '/_dashboard/dashboard'
    | '/_web/'
    | '/_dashboard/trips/new'
    | '/_web/tours/$id'
    | '/_dashboard/trips/'
    | '/_dashboard/users/'
    | '/_dashboard/trips/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  WebRouteRoute: typeof WebRouteRouteWithChildren
  CheckoutRoute: typeof CheckoutRoute
  LoginRoute: typeof LoginRoute
  ThxRoute: typeof ThxRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/thx': {
      id: '/thx'
      path: '/thx'
      fullPath: '/thx'
      preLoaderRoute: typeof ThxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_web': {
      id: '/_web'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WebRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_web/': {
      id: '/_web/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WebIndexRouteImport
      parentRoute: typeof WebRouteRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/trips': {
      id: '/_dashboard/trips'
      path: '/trips'
      fullPath: '/trips'
      preLoaderRoute: typeof DashboardTripsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/users/': {
      id: '/_dashboard/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof DashboardUsersIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/trips/': {
      id: '/_dashboard/trips/'
      path: '/'
      fullPath: '/trips/'
      preLoaderRoute: typeof DashboardTripsIndexRouteImport
      parentRoute: typeof DashboardTripsRouteRoute
    }
    '/_web/tours/$id': {
      id: '/_web/tours/$id'
      path: '/tours/$id'
      fullPath: '/tours/$id'
      preLoaderRoute: typeof WebToursIdRouteImport
      parentRoute: typeof WebRouteRoute
    }
    '/_dashboard/trips/new': {
      id: '/_dashboard/trips/new'
      path: '/new'
      fullPath: '/trips/new'
      preLoaderRoute: typeof DashboardTripsNewRouteImport
      parentRoute: typeof DashboardTripsRouteRoute
    }
    '/_dashboard/trips/$id/': {
      id: '/_dashboard/trips/$id/'
      path: '/$id'
      fullPath: '/trips/$id'
      preLoaderRoute: typeof DashboardTripsIdIndexRouteImport
      parentRoute: typeof DashboardTripsRouteRoute
    }
  }
}

interface DashboardTripsRouteRouteChildren {
  DashboardTripsNewRoute: typeof DashboardTripsNewRoute
  DashboardTripsIndexRoute: typeof DashboardTripsIndexRoute
  DashboardTripsIdIndexRoute: typeof DashboardTripsIdIndexRoute
}

const DashboardTripsRouteRouteChildren: DashboardTripsRouteRouteChildren = {
  DashboardTripsNewRoute: DashboardTripsNewRoute,
  DashboardTripsIndexRoute: DashboardTripsIndexRoute,
  DashboardTripsIdIndexRoute: DashboardTripsIdIndexRoute,
}

const DashboardTripsRouteRouteWithChildren =
  DashboardTripsRouteRoute._addFileChildren(DashboardTripsRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardTripsRouteRoute: typeof DashboardTripsRouteRouteWithChildren
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardTripsRouteRoute: DashboardTripsRouteRouteWithChildren,
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface WebRouteRouteChildren {
  WebIndexRoute: typeof WebIndexRoute
  WebToursIdRoute: typeof WebToursIdRoute
}

const WebRouteRouteChildren: WebRouteRouteChildren = {
  WebIndexRoute: WebIndexRoute,
  WebToursIdRoute: WebToursIdRoute,
}

const WebRouteRouteWithChildren = WebRouteRoute._addFileChildren(
  WebRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  WebRouteRoute: WebRouteRouteWithChildren,
  CheckoutRoute: CheckoutRoute,
  LoginRoute: LoginRoute,
  ThxRoute: ThxRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
